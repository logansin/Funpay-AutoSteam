import os
import uuid
import logging
import re
import requests
from dotenv import load_dotenv

from FunPayAPI import Account
from FunPayAPI.updater.runner import Runner
from FunPayAPI.updater.events import NewOrderEvent, NewMessageEvent

# ---------- ENV ----------
load_dotenv()

FUNPAY_AUTH_TOKEN = os.getenv("FUNPAY_AUTH_TOKEN")
STEAM_API_USER = os.getenv("STEAM_API_USER")
STEAM_API_PASS = os.getenv("STEAM_API_PASS")
MIN_BALANCE = float(os.getenv("MIN_BALANCE", "5"))

CATEGORY_ID = 1086

# ---------- COLORFUL LOGGING ----------
try:
    from colorama import init as colorama_init, Fore, Style
    colorama_init(autoreset=True)
except Exception:
    class _Dummy:
        RESET_ALL = ""
    class _Fore(_Dummy):
        RED = GREEN = YELLOW = CYAN = MAGENTA = BLUE = WHITE = ""
    class _Style(_Dummy):
        BRIGHT = NORMAL = ""
    Fore, Style = _Fore(), _Style()

class ColorFormatter(logging.Formatter):
    LEVEL_COLORS = {
        logging.DEBUG: Fore.BLUE,
        logging.INFO: Fore.CYAN,
        logging.WARNING: Fore.YELLOW,
        logging.ERROR: Fore.RED,
        logging.CRITICAL: Fore.MAGENTA + Style.BRIGHT,
    }

    def format(self, record):
        color = self.LEVEL_COLORS.get(record.levelno, "")
        message = super().format(record)
        return f"{color}{message}{Style.RESET_ALL}"

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s:%(lineno)d | %(message)s"
)
for h in logging.getLogger().handlers:
    h.setFormatter(ColorFormatter(h.formatter._fmt if hasattr(h, "formatter") else "%(message)s"))

logger = logging.getLogger("SteamBot")

# ---------- CONSTANTS & STATE ----------
MIN_AMOUNTS = {
    "RUB": 15,
    "KZT": 80,
    "UAH": 7,
    "USD": 0.15
}

STEAM_BASE = "https://xn--h1aahgceagbyl.xn--p1ai/api"
REQUEST_TIMEOUT = 20

USER_STATES = {}

# ==================== STEAM API ====================
def _friendly_http_error(resp: requests.Response, default_msg: str = "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."):
    try:
        data = resp.json()
    except Exception:
        data = {}
    text = data.get("message") or data.get("detail") or ""
    tech = text or resp.text[:500]
    logger.error(f"{default_msg} HTTP {resp.status_code}. –û—Ç–≤–µ—Ç: {tech}")
    if resp.status_code in (401, 403):
        return "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞. –£–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è ‚Äî –æ—Ñ–æ—Ä–º–∏–º –≤–æ–∑–≤—Ä–∞—Ç."
    if resp.status_code in (429,):
        return "–°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ ‚Äî –º—ã —Å–¥–µ–ª–∞–µ–º –≤–æ–∑–≤—Ä–∞—Ç."
    if resp.status_code >= 500:
        return "–£ —Å–µ—Ä–≤–∏—Å–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏. –ú—ã –≤–µ—Ä–Ω—ë–º —Å—Ä–µ–¥—Å—Ç–≤–∞."
    if resp.status_code >= 400:
        return "–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω —Å–µ—Ä–≤–∏—Å–æ–º. –ú—ã –≤–µ—Ä–Ω—ë–º —Å—Ä–µ–¥—Å—Ç–≤–∞."
    return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –ú—ã –≤–µ—Ä–Ω—ë–º —Å—Ä–µ–¥—Å—Ç–≤–∞."

def get_api_token() -> str:
    try:
        url = f"{STEAM_BASE}/token"
        payload = {"username": STEAM_API_USER, "password": STEAM_API_PASS}
        headers = {"accept": "application/json", "content-type": "application/json"}
        r = requests.post(url, json=payload, headers=headers, timeout=REQUEST_TIMEOUT)
        r.raise_for_status()
        token = r.json().get("access_token")
        if not token:
            raise RuntimeError("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Steam API (–Ω–µ—Ç access_token).")
        logger.info(Fore.GREEN + "‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏ —Ç–æ–∫–µ–Ω Steam API")
        return token
    except Exception:
        logger.exception(Fore.RED + "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω Steam API")
        raise

STEAM_TOKEN = get_api_token()

def steam_headers() -> dict:
    return {
        "accept": "application/json",
        "content-type": "application/json",
        "authorization": f"Bearer {STEAM_TOKEN}"
    }

def check_login(login: str) -> bool:
    if not login:
        return False
    try:
        r = requests.post(f"{STEAM_BASE}/check", json={"login": login}, headers=steam_headers(), timeout=REQUEST_TIMEOUT)
        ok = bool(r.json().get("result", False))
        logger.info((Fore.GREEN if ok else Fore.YELLOW) + f"üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–Ω–∞: '{login}' -> {ok}")
        return ok
    except Exception as e:
        logger.error(Fore.RED + f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–Ω–∞ Steam: {e}")
        return False

def convert_to_usd(currency: str, amount: float) -> float | None:
    try:
        if currency.upper() == "USD":
            return float(amount)
        r = requests.post(
            f"{STEAM_BASE}/rates",
            json={"primary_currency": currency.upper(), "amount": amount},
            headers=steam_headers(),
            timeout=REQUEST_TIMEOUT
        )
        if r.status_code != 200:
            logger.warning(Fore.YELLOW + f"[RATES] –ù–µ—Ö–æ—Ä–æ—à–∏–π –æ—Ç–≤–µ—Ç: {r.status_code} {r.text[:200]}")
        return r.json().get("usd_price")
    except Exception as e:
        logger.error(Fore.RED + f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        return None

def create_order(login: str, usd_amount: float):
    custom_id = str(uuid.uuid4())
    payload = {
        "service_id": 1,
        "quantity": round(float(usd_amount), 2),
        "custom_id": custom_id,
        "data": login
    }
    logger.debug(Fore.BLUE + f"[DEBUG] payload create_order: {payload}")
    r = requests.post(
        f"{STEAM_BASE}/create_order",
        json=payload,
        headers=steam_headers(),
        timeout=REQUEST_TIMEOUT
    )
    logger.info(
        (Fore.GREEN if r.status_code == 200 else Fore.RED)
        + f"üßæ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ {custom_id}: HTTP {r.status_code}"
    )
    return r, custom_id

def pay_order(custom_id: str):
    payload = {"custom_id": str(custom_id)}
    logger.debug(Fore.BLUE + f"[DEBUG] payload pay_order: {payload}")
    r = requests.post(
        f"{STEAM_BASE}/pay_order",
        json=payload,
        headers=steam_headers(),
        timeout=REQUEST_TIMEOUT
    )
    logger.info(
        (Fore.GREEN if r.status_code == 200 else Fore.RED)
        + f"üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ {custom_id}: HTTP {r.status_code}"
    )
    return r


def check_balance() -> float:
    try:
        r = requests.post(
            f"{STEAM_BASE}/check_balance",
            headers=steam_headers(),
            timeout=REQUEST_TIMEOUT
        )
        r.raise_for_status()

        data = r.json()
        if isinstance(data, dict):
            balance = float(data.get("balance", 0))
        else:
            balance = float(data)

        logger.info(Fore.MAGENTA + f"[BALANCE] –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å API: {balance} USD")
        return balance

    except Exception as e:
        logger.error(Fore.RED + f"[BALANCE] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
        return 0.0



def deactivate_category(account: Account, category_id: int):
    try:
        my_lots = account.get_my_subcategory_lots(category_id)
        deactivated = 0
        for lot in my_lots:
            field = account.get_lot_fields(lot.id)
            if field.active:
                field.active = False
                account.save_lot(field)
                deactivated += 1
                logger.info(Fore.YELLOW + f"[LOTS] –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–æ—Ç {lot.id}")
        logger.warning(Fore.YELLOW + f"[LOTS] –í—Å–µ–≥–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {deactivated}")
    except Exception as e:
        logger.error(Fore.RED + f"[LOTS] –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ª–æ—Ç–æ–≤: {e}")

def get_subcategory_id_safe(order, account):
    subcat = getattr(order, "subcategory", None) or getattr(order, "sub_category", None)
    if subcat and hasattr(subcat, "id"):
        return subcat.id, subcat

    try:
        full_order = account.get_order(order.id)
        subcat = getattr(full_order, "subcategory", None) or getattr(full_order, "sub_category", None)
        if subcat and hasattr(subcat, "id"):
            return subcat.id, subcat
    except Exception as e:
        logger.warning(Fore.YELLOW + f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª–Ω—ã–π –∑–∞–∫–∞–∑: {e}")

    return None, None

# ==================== HELPERS ====================
def _first_number_from_string(s: str) -> float | None:
    m = re.search(r"(\d+(?:[.,]\d+)?)", s)
    if m:
        try:
            return float(m.group(1).replace(",", "."))
        except:
            return None
    return None

def get_order_amount(order) -> tuple[float, str] | None:
    candidate_attrs = ["quantity", "qty", "amount", "sum", "count", "price", "quantity_value", "quantity_text"]
    for attr in candidate_attrs:
        val = getattr(order, attr, None)
        if val is None or (isinstance(val, str) and not val.strip()):
            continue
        if isinstance(val, (int, float)):
            logger.info(Fore.CYAN + f"[get_order_amount] –í–∑—è—Ç–æ –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ '{attr}': {float(val)}")
            return float(val), f"attr:{attr}"
        try:
            s = str(val).replace(",", ".").strip()
            num = _first_number_from_string(s)
            if num is not None:
                logger.info(Fore.CYAN + f"[get_order_amount] –í–∑—è—Ç–æ –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ '{attr}' (–ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏): {num} (raw='{val}')")
                return float(num), f"attr:{attr}"
        except Exception as e:
            logger.debug(f"[get_order_amount] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Ç—Ä–∏–±—É—Ç–∞ {attr}: {e}")

    text_fields = []
    for f in ("html", "title", "full_description", "short_description"):
        v = getattr(order, f, None)
        if v:
            text_fields.append(str(v))
    full_text = " ".join(text_fields).lower()
    if not full_text.strip():
        logger.warning(Fore.YELLOW + "[get_order_amount] –ù–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—É–º–º—ã.")
        return None

    patterns_priority = [
        r'(?:–∫–æ–ª–∏—á–µ—Å—Ç–≤(?:–æ|–æ:)|–∫–æ–ª-–≤–æ|–∫–æ–ª:)\D{0,60}?(\d+(?:[.,]\d+)?)',
        r'(?:amount|quantity|qty)\D{0,60}?(\d+(?:[.,]\d+)?)',
        r'(?:–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ|–ø–æ–ø–æ–ª–Ω–µ–Ω|wallet|steam_wallet)\D{0,60}?(\d+(?:[.,]\d+)?)',
        r'(\d+(?:[.,]\d+)?)\s*(?:uah|–≥—Ä–Ω|uah|rub|—Ä—É–±|kzt|—Ç–µ–Ω–≥–µ|usd|\$|‚ÇΩ|‚Ç∏)\b'
    ]
    for pat in patterns_priority:
        m = re.search(pat, full_text)
        if m:
            try:
                val = float(m.group(1).replace(",", "."))
                logger.info(Fore.CYAN + f"[get_order_amount] –ù–∞–π–¥–µ–Ω–æ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–º—É —à–∞–±–ª–æ–Ω—É: {val} (pattern: {pat})")
                return val, f"pattern:{pat}"
            except Exception:
                continue

    first_num = _first_number_from_string(full_text)
    if first_num is not None:
        logger.info(Fore.CYAN + f"[get_order_amount] –í–∑—è—Ç–æ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞: {first_num}")
        return float(first_num), "text:first_number"

    logger.warning(Fore.YELLOW + "[get_order_amount] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.")
    return None

def get_description_text(order) -> str:
    for attr in ("full_description", "short_description", "html", "title"):
        v = getattr(order, attr, None)
        if v:
            return str(v).lower()
    return ""

def _nice_refund(account: Account, chat_id, order_id, user_text: str):
    logger.info(Fore.YELLOW + f"‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –ø–æ –∑–∞–∫–∞–∑—É {order_id}: {user_text}")
    if chat_id:
        account.send_message(chat_id, user_text + "\n\n–î–µ–Ω—å–≥–∏ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
    if order_id:
        account.refund(order_id)

# ==================== HANDLERS ====================
def handle_new_order(account: Account, order):
    try:
        subcat_id, subcat = get_subcategory_id_safe(order, account)
        if subcat_id != CATEGORY_ID:
            logger.info(Fore.BLUE + f"[ORDER] –ó–∞–∫–∞–∑ {order.id} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω (subcategory {subcat_id}, —Ç—Ä–µ–±—É–µ—Ç—Å—è {CATEGORY_ID})")
            return

        chat_id = getattr(order, "chat_id", None)
        buyer_id = getattr(order, "buyer_id", None)

        title = getattr(order, "title", None)
        logger.info(Style.BRIGHT + Fore.WHITE + "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
        logger.info(Style.BRIGHT + Fore.CYAN + f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{getattr(order, 'id', 'unknown')} | –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {buyer_id}")
        if title:
            logger.info(Fore.CYAN + f"üì¶ –¢–æ–≤–∞—Ä: {title}")
        logger.info(Style.BRIGHT + Fore.WHITE + "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")

        desc_text = get_description_text(order)
        if "steam_wallet:" not in desc_text:
            _nice_refund(
                account, chat_id, getattr(order, "id", None),
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∑–∞–∫–∞–∑–µ: –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≤–∞–ª—é—Ç–∞ (–æ–∂–∏–¥–∞–ª–æ—Å—å `steam_wallet: rub|uah|kzt|usd`)."
            )
            return

        try:
            currency_raw = desc_text.split("steam_wallet:")[1].split()[0]
            currency = currency_raw.strip().upper()
        except Exception:
            currency = None

        if currency not in MIN_AMOUNTS:
            _nice_refund(
                account, chat_id, getattr(order, "id", None),
                f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞: {currency or '‚Äî'}. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: RUB, UAH, KZT, USD."
            )
            return

        amt_info = get_order_amount(order)
        if not amt_info:
            _nice_refund(
                account, chat_id, getattr(order, "id", None),
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞."
            )
            return

        amount, source = amt_info
        logger.info(Fore.CYAN + f"[ORDER] –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount} {currency} (source={source})")

        if amount < MIN_AMOUNTS[currency]:
            _nice_refund(
                account, chat_id, getattr(order, "id", None),
                f"‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî {MIN_AMOUNTS[currency]} {currency}."
            )
            return

        usd_amount = convert_to_usd(currency, amount)
        if usd_amount is None:
            _nice_refund(
                account, chat_id, getattr(order, "id", None),
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–∞–ª—é—Ç—É. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –ø–æ–∑–∂–µ."
            )
            return

        USER_STATES[buyer_id] = {
            "step": "waiting_login",
            "order_id": getattr(order, "id", None),
            "chat_id": chat_id,
            "amount": amount,
            "currency": currency,
            "usd_amount": usd_amount
        }
        account.send_message(
            chat_id,
            "üëã –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!\n\n"
            f"–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount} {currency} (‚âà {usd_amount:.2f} USD).\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à *Steam-–ª–æ–≥–∏–Ω* (–±–µ–∑ –ø–æ—á—Ç—ã –∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞)."
        )
        logger.info(Fore.BLUE + f"‚è≥ –û–∂–∏–¥–∞–µ–º –ª–æ–≥–∏–Ω –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è {buyer_id}...")

    except Exception:
        logger.exception(Fore.RED + "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ (–æ–±—â–∞—è)")

def handle_new_message(account: Account, message):
    user_id = getattr(message, "author_id", None)
    chat_id = getattr(message, "chat_id", None)
    text = getattr(message, "text", "").strip()

    if not user_id or user_id not in USER_STATES:
        return

    state = USER_STATES[user_id]

    if state["step"] == "waiting_login":
        login = text
        if not check_login(login):
            account.send_message(
                chat_id,
                f"‚ö†Ô∏è –õ–æ–≥–∏–Ω *{login}* –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Ä–∞–∑.\n\n"
                "–ü—Ä–∏–º–µ—Ä: `gabelogannewell`"
            )
            logger.info(Fore.YELLOW + f"üö´ –õ–æ–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {login}")
            return

        state["login"] = login
        state["step"] = "confirm_login"
        account.send_message(
            chat_id,
            "‚úÖ –õ–æ–≥–∏–Ω –Ω–∞–π–¥–µ–Ω!\n\n"
            f"–í—ã —É–∫–∞–∑–∞–ª–∏: *{login}*\n"
            f"–°—É–º–º–∞: *{state['amount']} {state['currency']}* (‚âà *{state['usd_amount']:.2f} USD*)\n\n"
            "–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ `+`.\n"
            "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π."
        )
        logger.info(Fore.GREEN + f"‚úÖ –õ–æ–≥–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π: {login}")
        return

    if state["step"] == "confirm_login":
        if text == "+":
            logger.info(Fore.BLUE + f"üßæ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è {state['login']} –Ω–∞ {state['usd_amount']:.2f} USD")
            r, custom_id = create_order(state["login"], state["usd_amount"])

            try:
                json_r = r.json()
            except Exception:
                json_r = {}

            if r.status_code != 200 or "error" in json_r:
                user_msg = _friendly_http_error(r, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –≤ —Å–µ—Ä–≤–∏—Å–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.")
                account.send_message(chat_id, f"‚ùå {user_msg}")
                balance = check_balance()
                if balance < MIN_BALANCE:
                    logger.warning(Fore.YELLOW + "üí§ –ë–∞–ª–∞–Ω—Å –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ ‚Äî –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ª–æ—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
                    deactivate_category(account, CATEGORY_ID)
                account.refund(state["order_id"])
                USER_STATES.pop(user_id, None)
                return

            logger.info(Fore.BLUE + f"üí≥ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞ custom_id={custom_id}")
            pay_res = pay_order(custom_id)

            if pay_res.status_code == 200:
                state["step"] = "await_confirm_topup"
                account.send_message(
                    chat_id,
                    "üéâ –ì–æ—Ç–æ–≤–æ!\n\n"
                    f"–ú—ã –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å *{state['login']}* –Ω–∞ *{state['amount']} {state['currency']}* "
                    f"(‚âà *{state['usd_amount']:.2f} USD*).\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –≤ Steam. "
                    "–ï—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ, –Ω–∞–ø–∏—à–∏—Ç–µ **`–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é`**, –∏ –º—ã –∑–∞–≤–µ—Ä—à–∏–º –∑–∞–∫–∞–∑.\n"
                    "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ, —Ä–∞–∑–±–µ—Ä—ë–º—Å—è."
                )
                logger.info(Fore.GREEN + f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {state['amount']} {state['currency']} –¥–ª—è {state['login']}. –ñ–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.")
            else:
                user_msg = _friendly_http_error(pay_res, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑ –≤ —Å–µ—Ä–≤–∏—Å–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.")
                account.send_message(chat_id, f"‚ùå {user_msg}")
                balance = check_balance()
                if balance < MIN_BALANCE:
                    logger.warning(Fore.YELLOW + "üí§ –ë–∞–ª–∞–Ω—Å –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–∞ ‚Äî –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ª–æ—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
                    deactivate_category(account, CATEGORY_ID)
                account.refund(state["order_id"])
                USER_STATES.pop(user_id, None)

        else:
            new_login = text
            if not check_login(new_login):
                account.send_message(
                    chat_id,
                    f"‚ö†Ô∏è –õ–æ–≥–∏–Ω *{new_login}* –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
                )
                logger.info(Fore.YELLOW + f"üö´ –ù–æ–≤—ã–π –ª–æ–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω: {new_login}")
                return
            state["login"] = new_login
            account.send_message(
                chat_id,
                "‚úÖ –ù–æ–≤—ã–π –ª–æ–≥–∏–Ω –Ω–∞–π–¥–µ–Ω!\n\n"
                f"–í—ã —É–∫–∞–∑–∞–ª–∏: *{new_login}*\n"
                f"–°—É–º–º–∞: *{state['amount']} {state['currency']}* (‚âà *{state['usd_amount']:.2f} USD*)\n\n"
                "–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ `+`.\n"
                "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ª–æ–≥–∏–Ω ‚Äî —É–∫–∞–∂–∏—Ç–µ –¥—Ä—É–≥–æ–π."
            )
            logger.info(Fore.GREEN + f"‚ôªÔ∏è –õ–æ–≥–∏–Ω –æ–±–Ω–æ–≤–ª—ë–Ω: {new_login}")

        return

    if state["step"] == "await_confirm_topup":
        if text.lower() in ("–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é", "–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é.", "–æ–∫", "–æ–∫–µ–π", "–¥–∞", "+", "confirm", "confirmed"):
            try:
                account.complete_order(state["order_id"])
                account.send_message(
                    chat_id,
                    "‚úÖ –°–ø–∞—Å–∏–±–æ! –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ –∑–∞–≤–µ—Ä—à—ë–Ω.\n"
                    "–ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞ üëã"
                )
                logger.info(Fore.GREEN + f"üèÅ –ó–∞–∫–∞–∑ {state['order_id']} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –∏ –∑–∞–∫—Ä—ã—Ç.")
            except Exception as e:
                logger.error(Fore.RED + f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑ {state['order_id']}: {e}")
                account.send_message(
                    chat_id,
                    "‚ÑπÔ∏è –ú—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∏ –≤–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –≤ —Å–∏—Å—Ç–µ–º–µ. "
                    "–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
                )
            finally:
                USER_STATES.pop(user_id, None)
        else:
            account.send_message(
                chat_id,
                "–ï—Å–ª–∏ –≤—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ **`–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é`** –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n"
                "–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ ‚Äî –æ–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–±–ª–µ–º—É."
            )
            logger.info(Fore.CYAN + f"‚åõ –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è {user_id}. –¢–µ–∫—Å—Ç: {text}")

# ==================== RUNNER LOOP ====================
def main():
    if not FUNPAY_AUTH_TOKEN:
        raise RuntimeError("FUNPAY_AUTH_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
    if not (STEAM_API_USER and STEAM_API_PASS):
        raise RuntimeError("STEAM_API_USER/STEAM_API_PASS –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env")

    account = Account(FUNPAY_AUTH_TOKEN)
    account.get()
    logger.info(Fore.GREEN + f"üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {getattr(account, 'username', '(unknown)')}")
    runner = Runner(account)
    logger.info(Style.BRIGHT + Fore.WHITE + "üöÄ SteamBot –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é —Å–æ–±—ã—Ç–∏—è...")

    for event in runner.listen(requests_delay=3.0):
        try:
            if isinstance(event, NewOrderEvent):
                order = account.get_order(event.order.id)
                handle_new_order(account, order)
            elif isinstance(event, NewMessageEvent):
                handle_new_message(account, event.message)
        except Exception:
            logger.exception(Fore.RED + "–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ")

if __name__ == "__main__":
    main()
